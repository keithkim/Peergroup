<!--
Peergroup - build.xml
 
This file is part of Peergroup.

Peergroup is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Peergroup is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Author : Nicolas Inden
Contact: nicolas.inden@rwth-aachen.de

Copyright (c) 2013 Nicolas Inden
-->

<project name="Peergroup" default="all" basedir=".">
	
	<property name="src" location="./src" />
	<property name="lib" location="./lib" />
	<property name="tmp" location="./temp" />
	<property name="junit" location="./junit" />
	<property name="tests" location="./tests" />
	<property name="dist" location="./dist" />
	<property name="test.output" location="./test-output" />
	<property name="test.classes" location="${tmp}/testclasses" />
	<property name="tmpclasses" location="${tmp}/classes" />
	<property name="deploydir" location="./Peergroup" />
	<property name="docdir" location="./doc" />
	<property name="clientpkg" value="de" />
	<property name="test.class.name" value="peergroup.FileHandleTest" />
	
	<!-- set pathes-->
	<path id="build.classpath">
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
    </path>
	<path id="test.classpath">
	  <pathelement location="${junit}/junit.jar" />
	  <pathelement location="${test.classes}" />
	  <pathelement location="${tmpclasses}" />
	  <fileset dir="${lib}">
	    <include name="**/*.jar"/>
	  </fileset>
	</path>
	
	<!-- targets to run-->
	
	<!-- default target, will export the client and the java doc -->
	<target name="all" depends="jar, clean"/>
	
	<!-- JUnit-Test  target 
	<target name="test" depends="compile-tests">
	  <junit fork="yes" haltonfailure="yes" printsummary="true">
	    <classpath refid="test.classpath" />
		<batchtest todir="${test.output}">
		        <fileset dir="${test.classes}"/>
				<formatter type="plain" usefile="false"/>
        </batchtest>
	  </junit>
	</target>
	
	<target name="compile-tests" depends="compile">
		<mkdir dir="${test.classes}" />
		<mkdir dir="${test.output}" />
		<javac srcdir="${tests}" destdir="${test.classes}" compiler="extJavac" source="1.7" target="1.7" debug="on"
			includeantruntime="false">
			<classpath refid="test.classpath"/>
		</javac>
	</target> -->
	
	<taskdef name="bundleapp"
		classname="com.oracle.appbundler.AppBundlerTask"   
	  classpath="lib/appbundler-1.0.jar" />

	<target name="bundle" depends="jar, clean">
		<mkdir dir="${dist}" />
	    <bundleapp outputdirectory="dist"
			name="Peergroup"
	      	displayname="Peergroup"
			icon="art/Pgrp.icns"
	      	identifier="de.pgrp.core.Peergroup"
	      	mainclassname="de.pgrp.core.Peergroup">
	      	<classpath file="dist/peergroup.jar" />
			<option value="-Dapple.laf.useScreenMenuBar=true -Xms512M -Xmx2G" />
			<argument value="-GUI" />
	    </bundleapp>
	</target>
	
	<!-- wipeout target, will delete all unnecessary data as tmp dirs reports and javadoc so we only commit pure source-code into GIT -->
	<target name="wipeout">
		<delete dir="${tmp}" />
		<delete dir="${dist}" />
		<delete dir="${docdir}" />
		<delete dir="${test.classes}" />
		<delete dir="${test.output}" />
		<delete dir="./tmp" />
		<delete file="std.log" />		
	</target>
	
	<!-- explicit targets should not be (but can be) run alone -->
	
	<!-- create all missing folders -->
	<target name="init">
			<mkdir dir="${tmp}" />
			<mkdir dir="${tmpclasses}" />
	</target>
	
	<!-- clean share directories -->
	<target name="clean-test">
			<delete dir="test1/share" />
			<delete dir="test2/share" />
			<delete dir="test3/share" />
	</target>
	
	<!-- compile the source code -->
	<target name="compile" depends="init">
		<javac srcdir="${src}" destdir="${tmpclasses}" compiler="extJavac" source="1.7" target="1.7" debug="on"
			includeantruntime="false">
			<classpath refid="build.classpath"/>
		</javac>
	</target>
	
	<!-- export compiled code as a jar file -->
	<target name="jar" depends="compile">
			<mkdir dir="${dist}" />
			<jar jarfile="${dist}/peergroup.jar">
				<fileset dir="${tmpclasses}">
					<include name="${clientpkg}/**/*.class" />
				</fileset>
				<fileset dir="./art">
					<include name="*.png"/>
				</fileset>
				<zipgroupfileset dir="${lib}" includes="*.jar" excludes=""/>
				<manifest>
					<attribute name="Main-Class" value="de/pgrp/core/Peergroup"/>
				</manifest>
			</jar>
	</target>
	
	<!-- generate javadoc out of Source-Code comments -->
	<target name="javadoc" depends="init">
		<mkdir dir="${docdir}" />
		<javadoc classpathref="build.classpath" destdir="${docdir}" author="true" version="true" use="true" source="1.7" windowtitle="Peergroup API">
			<fileset dir="${src}">
				<include name="*/**/*.java" />
			</fileset>
		</javadoc>
	</target>
	
	<!-- Delete temporary folders -->
	<target name="clean">
		<delete dir="${tmp}" />
	</target>
	
	<target name="deploy-pkg" depends="jar, clean">
		<delete file="Peergroup.zip" />
		<mkdir dir="${deploydir}/Peergroup/" />
		<copy file="${dist}/peergroup.jar" todir="${deploydir}/Peergroup/" />
		<copy file="config.smp" todir="${deploydir}/Peergroup/" />
		<copy file="README.mdown" todir="${deploydir}/Peergroup/" />
		<copy file="license.txt" todir="${deploydir}/Peergroup/" />
		<copy file="pg-start" todir="${deploydir}/Peergroup/" />
		<copy file="pg-start.bat" todir="${deploydir}/Peergroup/" />
		<zip basedir="${deploydir}" destfile="Peergroup.zip" />
		<delete dir="${deploydir}" />
	</target>
	
	<target name="umlgraph-doc"
	        description="Create integrated Javadoc and class diagrams">
	    <javadoc
	                classpathref="build.classpath"
	                verbose="false"
	                >
	        <doclet name="org.umlgraph.doclet.UmlGraphDoc"
	                path="${lib}/UmlGraph.jar"
	                >
	            <param name="-d" value="${docdir}"/>
	            <param name="-private"/>
	            <param name="-all"/>
	            <param name="-inferrel"/>
	            <param name="-qualify"/>
	            <param name="-postfixpackage"/>
	            <param name="-useimports"/>
	            <param name="-collpackages" value="java.util.*"/>
	            <param name="-hide" value="java.lang.String"/>
	            <param name="-link" value="http://java.sun.com/j2se/1.5/docs/api"/>
	        </doclet>
	        <packageset dir="${src}" defaultexcludes="yes"/>
	    </javadoc>
	</target>
	
</project>
